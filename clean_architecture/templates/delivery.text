package {{.Meta.dir_usecase}}

import (
	 "{{.Meta.import_http_framework}}"
     "{{.Meta.import_usecase}}"
     "{{.Meta.import_request}}"
     "{{.Meta.import_app}}"
)

type {{.Model}}Rest struct {
	{{.Model}}Fetch  {{.ModelSnake}}_usecase.{{.Model}}Fetch
	{{.Model}}Get    {{.ModelSnake}}_usecase.{{.Model}}Get
	{{.Model}}Delete {{.ModelSnake}}_usecase.{{.Model}}Delete
	{{.Model}}Update {{.ModelSnake}}_usecase.{{.Model}}Update
	{{.Model}}Store  {{.ModelSnake}}_usecase.{{.Model}}Store
}

func (r {{.Model}}Rest) Expose(app app.App) {
	{{.ModelCamel}} := app.Framework.Group("/{{.ModelSnake}}")
	{{.ModelCamel}}.Get("", r.Show)
	{{.ModelCamel}}.Get("s", r.Paginate)
	{{.ModelCamel}}.Post("", r.Store)
	{{.ModelCamel}}.Put("/:uuid", r.Update)
	{{.ModelCamel}}.Delete("/:uuid", r.Delete)
}

func (r {{.Model}}Rest) Show(ctx *http_framework.Contextor) error {
	param := {{.ModelSnake}}_request.{{.Model}}Param{}
	err := ctx.Bind(&param)
	if err != nil {
		return err
	}

	res, err := r.{{.Model}}Get.Get(ctx.ToContext(), param)
	if err != nil {
		return ctx.JSON(400, err.Error())
	}

	return ctx.JSON(200, res)
}

func (r {{.Model}}Rest) Find(ctx *http_framework.Contextor) error {
	param := {{.ModelSnake}}_request.{{.Model}}Param{}
	err := ctx.Bind(&param)
	if err != nil {
		return ctx.JSON(400, err.Error())
	}

	res, err := r.{{.Model}}Fetch.Fetch(ctx.ToContext(), param)
	if err != nil {
		return ctx.JSON(404, err.Error())
	}

	return ctx.JSON(200, res)
}

func (r {{.Model}}Rest) Store(ctx *http_framework.Contextor) error {
	param := new({{.ModelSnake}}_request.{{.Model}}Store)
	err := ctx.Bind(param)
	if err != nil {
		return ctx.JSON(400, err.Error())
	}

	err = ctx.Validate(param)
	if err != nil {
		return err
	}

	res, err := r.{{.Model}}Store.Store(ctx.ToContext(), *param)
	if err != nil {
		return ctx.JSON(500, err.Error())
	}
	return ctx.JSON(200, res)
}

func (r {{.Model}}Rest) Update(ctx *http_framework.Contextor) error {
	param := new({{.ModelSnake}}_request.{{.Model}}Update)
	err := ctx.Bind(param)
	if err != nil {
		return ctx.JSON(400, err.Error())
	}
	param.UUID = ctx.Param("uuid")

	err = ctx.Validate(param)
	if err != nil {
		return err
	}

	res, err := r.{{.Model}}Update.Update(ctx.ToContext(), *param)
	if err != nil {
		return err
	}

	return ctx.JSON(200, res)
}

func (r {{.Model}}Rest) Delete(ctx *http_framework.Contextor) error {
	uuid := ctx.Param("uuid")
	err := r.{{.Model}}Delete.Delete(ctx.ToContext(), uuid)
	if err != nil {
		return err
	}

	return ctx.JSON(200, uuid)
}

func (r {{.Model}}Rest) Paginate(ctx *http_framework.Contextor) error {
	param := {{.ModelSnake}}_request.{{.Model}}Param{}
	err := ctx.Bind(&param)
	if err != nil {
		return ctx.JSON(400, err.Error())
	}

	res, err := r.{{.Model}}Fetch.Paginate(ctx.ToContext(), param)
	if err != nil {
		return ctx.JSON(404, err.Error())
	}

	return ctx.JSON(200, res)
}
